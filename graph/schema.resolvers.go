package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/fujiwaram/gqlgen-list-test/graph/model"
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

// UserList is the resolver for the userList field.
func (r *queryResolver) UserList(ctx context.Context, param *model.UserListParams) (*model.UserList, error) {
	condQuery, condArgs, err := param.ToQuery()
	if err != nil {
		return nil, fmt.Errorf("failed to convert query: %w", err)
	}
	var users []model.User
	if err := r.db.SelectContext(ctx, &users, r.db.Rebind("SELECT id, name, email, birthday FROM users"+condQuery), condArgs...); err != nil {
		return nil, fmt.Errorf("failed to query: %w", err)
	}
	return &model.UserList{Users: users}, nil
}

// Friends is the resolver for the friends field.
func (r *userResolver) Friends(ctx context.Context, obj *model.User) ([]model.User, error) {
	friendIDs, err := r.findFriendIDs(ctx, obj.ID)
	if err != nil {
		return nil, fmt.Errorf(": %w", err)
	}
	if len(friendIDs) == 0 {
		return nil, nil
	}
	users, errs := GetUsers(ctx, friendIDs)
	for _, err := range errs {
		if err != nil {
			return nil, fmt.Errorf(": %w", err)
		}
	}
	return users, nil
}

// FriendsEach is the resolver for the friendsEach field.
func (r *userResolver) FriendsEach(ctx context.Context, obj *model.User) ([]model.User, error) {
	friendIDs, err := r.findFriendIDs(ctx, obj.ID)
	if err != nil {
		return nil, fmt.Errorf(": %w", err)
	}
	if len(friendIDs) == 0 {
		return nil, nil
	}
	q := "SELECT id, name, email, birthday FROM users WHERE id IN (?)"
	query, args, err := sqlx.In(q, friendIDs)
	if err != nil {
		return nil, fmt.Errorf("failed to convert query: %w", err)
	}
	users := make([]model.User, 0, len(friendIDs))
	if err := r.db.SelectContext(ctx, &users, r.db.Rebind(query), args...); err != nil {
		return nil, fmt.Errorf("failed to query: %w", err)
	}
	return users, nil
}

func (r *userResolver) findFriendIDs(ctx context.Context, userID int64) ([]int64, error) {
	var friendIDs []int64
	if err := r.db.SelectContext(ctx, &friendIDs, "SELECT friend_id FROM friends WHERE user_id = $1", userID); err != nil {
		return nil, fmt.Errorf("failed to query: %w", err)
	}
	return friendIDs, nil
}

// TotalCount is the resolver for the totalCount field.
func (r *userListResolver) TotalCount(ctx context.Context, obj *model.UserList) (int64, error) {
	var cnt []int
	err := r.db.SelectContext(ctx, &cnt, "SELECT COUNT(1) FROM users")
	if err != nil {
		return 0, fmt.Errorf("failed to query: %w", err)
	}
	if len(cnt) == 0 {
		return 0, nil
	}
	return int64(cnt[0]), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// UserList returns UserListResolver implementation.
func (r *Resolver) UserList() UserListResolver { return &userListResolver{r} }

type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type userListResolver struct{ *Resolver }
