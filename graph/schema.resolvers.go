package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/fujiwaram/gqlgen-list-test/graph/model"
	_ "github.com/lib/pq"
)

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, param *model.UserListParams) (*model.UserList, error) {
	condQuery, condArgs, err := param.ToQuery()
	if err != nil {
		return nil, fmt.Errorf("failed to convert query: %w", err)
	}
	rows, err := r.db.QueryxContext(ctx, r.db.Rebind("SELECT id, name, email, birthday FROM users"+condQuery), condArgs...)
	if err != nil {
		return nil, fmt.Errorf("failed to query: %w", err)
	}
	defer rows.Close()

	users := make([]model.User, 0)
	for rows.Next() {
		var user model.User
		if err := rows.StructScan(&user); err != nil {
			return nil, fmt.Errorf("failed to query scan: %w", err)
		}
		users = append(users, user)
	}
	return &model.UserList{Users: users}, nil
}

// Families is the resolver for the families field.
func (r *userResolver) Families(ctx context.Context, obj *model.User) ([]model.Family, error) {
	panic(fmt.Errorf("not implemented: Families - families"))
}

// TotalCount is the resolver for the totalCount field.
func (r *userListResolver) TotalCount(ctx context.Context, obj *model.UserList) (int64, error) {
	panic(fmt.Errorf("not implemented: TotalCount - totalCount"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// UserList returns UserListResolver implementation.
func (r *Resolver) UserList() UserListResolver { return &userListResolver{r} }

type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type userListResolver struct{ *Resolver }
