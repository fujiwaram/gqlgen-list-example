// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Family struct {
	ID       int64  `json:"id" db:"id"`
	Name     string `json:"name" db:"name"`
	Birthday Time   `json:"birthday" db:"birthday"`
}

type IntFilter struct {
	Value     int64              `json:"value"`
	Condition IntFilterCondition `json:"condition"`
}

type StringFilter struct {
	Value     string                `json:"value"`
	Condition StringFilterCondition `json:"condition"`
}

type TimeFilter struct {
	Value     Time                `json:"value"`
	Condition TimeFilterCondition `json:"condition"`
}

type User struct {
	ID       int64    `json:"id" db:"id"`
	Name     string   `json:"name" db:"name"`
	Email    string   `json:"email" db:"email"`
	Birthday Time     `json:"birthday" db:"birthday"`
	Families []Family `json:"families"`
}

type UserFilter struct {
	ID       *IntFilter    `json:"id,omitempty"`
	Name     *StringFilter `json:"name,omitempty"`
	Email    *StringFilter `json:"email,omitempty"`
	Birthday *TimeFilter   `json:"birthday,omitempty"`
}

type UserList struct {
	Users      []User `json:"users"`
	TotalCount int64  `json:"totalCount"`
}

type UserListParams struct {
	Filter *UserFilter `json:"filter,omitempty"`
	Sort   *UserSort   `json:"sort,omitempty"`
	Limit  *int64      `json:"limit,omitempty"`
	Offset *int64      `json:"offset,omitempty"`
}

type UserSort struct {
	ID       *SortDirection `json:"id,omitempty"`
	Name     *SortDirection `json:"name,omitempty"`
	Email    *SortDirection `json:"email,omitempty"`
	Birthday *SortDirection `json:"birthday,omitempty"`
}

type IntFilterCondition string

const (
	IntFilterConditionEq  IntFilterCondition = "EQ"
	IntFilterConditionGte IntFilterCondition = "GTE"
	IntFilterConditionLte IntFilterCondition = "LTE"
)

var AllIntFilterCondition = []IntFilterCondition{
	IntFilterConditionEq,
	IntFilterConditionGte,
	IntFilterConditionLte,
}

func (e IntFilterCondition) IsValid() bool {
	switch e {
	case IntFilterConditionEq, IntFilterConditionGte, IntFilterConditionLte:
		return true
	}
	return false
}

func (e IntFilterCondition) String() string {
	return string(e)
}

func (e *IntFilterCondition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IntFilterCondition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IntFilterCondition", str)
	}
	return nil
}

func (e IntFilterCondition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StringFilterCondition string

const (
	StringFilterConditionEq       StringFilterCondition = "EQ"
	StringFilterConditionContains StringFilterCondition = "CONTAINS"
)

var AllStringFilterCondition = []StringFilterCondition{
	StringFilterConditionEq,
	StringFilterConditionContains,
}

func (e StringFilterCondition) IsValid() bool {
	switch e {
	case StringFilterConditionEq, StringFilterConditionContains:
		return true
	}
	return false
}

func (e StringFilterCondition) String() string {
	return string(e)
}

func (e *StringFilterCondition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StringFilterCondition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StringFilterCondition", str)
	}
	return nil
}

func (e StringFilterCondition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TimeFilterCondition string

const (
	TimeFilterConditionEq  TimeFilterCondition = "EQ"
	TimeFilterConditionGte TimeFilterCondition = "GTE"
	TimeFilterConditionLte TimeFilterCondition = "LTE"
)

var AllTimeFilterCondition = []TimeFilterCondition{
	TimeFilterConditionEq,
	TimeFilterConditionGte,
	TimeFilterConditionLte,
}

func (e TimeFilterCondition) IsValid() bool {
	switch e {
	case TimeFilterConditionEq, TimeFilterConditionGte, TimeFilterConditionLte:
		return true
	}
	return false
}

func (e TimeFilterCondition) String() string {
	return string(e)
}

func (e *TimeFilterCondition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimeFilterCondition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimeFilterCondition", str)
	}
	return nil
}

func (e TimeFilterCondition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
